#   STUDENT NAME                    KU ID / EMAIL
-------------------------------------------------------
1   Borgsmidt, Rasmus               qzp823@alumni.ku.dk
        Assignment 1: NOT SUBMITTED

2   Bramming, Mathias               grm609@alumni.ku.dk
        Assignment 1:  AFTER RESUBMISSION 8/10 (was FAIL)
            -- task 1 SOLVED in RESUBMSSION (was incorrect before)
            -- task 2 was solved correctly (but not really tested)
            -- task 3: missing
            -- task 4: SOLVED in RESUBMISSION 
            -- task 5: SOLVED in RESUBMISSION

3   Dørge, Aske                     hnr137@alumni.ku.dk
        Assignment 1:  AFTER RESUBMISSION 9/10 (was 7/10)
            -- task 1: almost correct, has confused `map (map f)' 
                                              with `(map . map f)'
            -- task 2: perfect but no tests
            -- task 3: flat parallelism, but merge operator uses concatenation.
                       flag array is not correct, value array seems correct.
            -- task 4: CORRECTED in RESUBMISSION
                        (a) is morally the flat version, OK, (b) is incorrect,
                        as it uses a segmented scan with non-associative operator:
                        (id1,v1) `myop` (id2,v2) = 
                            ((-1), let lres = if id1 == (-1) then v1 else v1*(x !! id1)
                                       rres = if id2 == (-1) then v2 else v2*(x !! id2)
                                   in lres+rres))
            -- task 5: ok.
    
        Assignment 2: 7/10
                      Task1 Good! 
                      Task 2: Good but untested (on 8-element array only)
                      Task 3: pseudocode.
        Assignment 3: 8/10
            -- CPU version of task2: forgot to multiply i*64
            -- after fix, everything worked.
            -- task2 with transposition was not submitted

4   Egeberg, Daniel Hessellund      mzn808@alumni.ku.dk
        Assignment 1:   9/10   + 1 bonus for Assign3
            -- Task 1, 2, 3, 4a -- perfect
            -- Task 4b: is ``cheating'': he creates a list of list, some empty and flatten 
                                         that at the end. (instead of shifting the flags and
                                         using a filter or a write).
            -- Task 5: ok (bypasses the copying of the array by using the index space!)

        Assignment 2: 9/10    + 1 bonus for Assign 3
            -- Task 1: good!
            -- Task 2: good!
            -- Task 3: good but minimal testing (minuscule array)
        Assignment 3: 10/10
            -- PERFECT!

5   Espensen, Morten                dzr440@alumni.ku.dk
        Assignment 1:   9/10 AFTER RESUBMISSION   (was 7/10)
            -- Task 1: perfect.
            -- Task 2: FIXED in RESUBMISSION
                       not touched (?)
            -- Task 3: nested parallelism: mapping over parFilter, but using
                        a recursive (seq) function with cons and ++ to build the flags.
            -- Task 4a: ok
            -- Task 4b: FIXED IN RESUBMISSION
                        right idea: flat map followed by segmented scan,
                        but then uses again a recursive function of depth O(n)
                        that uses concatenation (instead of shifting the flags
                        by one and selecting the end of the segment, which is
                        now directly under a flag != 0)
            -- Task 5: seems ok.

        Assignment 2: 6/10
            -- Task 1: ok modulo small bugs, e.g., block size 1.
            -- Task 2: not done -- reported a real bug for block size 1024
            -- Task 3: after solving some bugs it works, but on a 
                        minuscule example & implementation is not generic
                        in terms of size.

        Assignment 3: 6/10
			-- only task1a and task2.a submitted
				naive transposition only somewhat works for
				specific matrix sizes.

6   Garnæs, Peter Alexander          tbr439@alumni.ku.dk
        Assignment 1:   6/10
            -- Task 1: perfect
            -- Task 2: perfect
            -- Task 3: not submitted (?)
            -- Task 4: not submitted (?): Please, come talk to me!
            -- Task 5: seems ok.

7   Hansen, Rune Filtenborg         rpf828@alumni.ku.dk
        Assignment 1:   7/10
            -- Task 1: perfect
            -- Task 2: perfect
            -- Task 3: not submitted, some pseudocode shown  (?)
            -- Task 4a: ok; 4b not submitted, some pseudocode shown  (?): Please, come talk to me!
            -- Task 5: seems ok.
        Assignment 2: 5/10
            -- Many many compile-time bugs
            -- Cosmin took a while to solve them and made task1 and 2 work
            -- minimal testing
            -- Task 3: tried prime numbers, suggested the easier 
                sparse-matrix vector multiplication
		Assignment 3: 10/10
			-- very close to perfect (BONUS POINTS?)

8   Holmgreen, Casper Mark Hagen    tcv380@alumni.ku.dk
        Assignment 1:  After Resubmission 9/10 (was 8/10)
            -- Task 1: perfect,
            -- Task 2: newok = okx && oky   (missing a && connect)
            -- Task 3: recursion of extra depth O(# of segments)
            -- Task 4a: ok, 
            -- Task 4b: CORRECTED in RESUBMISSION
                        almost ok, but not quite, i.e., works
                        because of serial execution.
                      
                    write (scanInc (+) (-1) flags) 
                          (segmScanInc (+) 0 flags vals) 
                          (replicate vct_len 0)
            -- Task 5: seems ok.

        Assignment 2: 10/10
            -- Task 1 & 2 Perfect
            -- Task 3: small bug + works only for pow2 sizes,
                        but also for large sizes. Good testing.
		Assignment 3: 10/10
			-- perfect!


9   Høj, Niklas                     nwv762@alumni.ku.dk
        Assignment 1: AFTER RESUBMISSION 8/10  (was 6/10)
            -- Task 1: perfect
            -- Task 2: FIXED IN RESUBMISSION
                        almost ok, but
                        newlss = reduce max 0 [lssx, lssy, newlis, newlcs]
                       is not correct.
            -- Task 3: STILL USES NESTED PARALLELISM
                        no parallel operator, all recrusion, missed the point.
            -- Task 4a: ok
            -- Task 4b: FIXED BY RESUBMISSION
                        flat map -> ok, but the rest is recursion again.
            -- Task 5: FIXED BY RESUBMISSION
        Assignment 2: FAIL
            -- Task 1 ok.
            -- Task 2 completely missed the point, and
                        tries with block size 9 or 5
            -- Task 3 not submitted
		Assignment 3: 7/10
			-- minimal sizes for Task1, no validation
			-- tiled transposition not implemented
				(suggested resubmission will give him 10.)

10  Justesen, Tor Heberg            lwj858@alumni.ku.dk
        Assignment 1: 10/10
            -- Task 1: perfect
            -- Task 2: almost ok, but
                        newok   = okx && oky
                       forgot && connect
            -- Task 3: PERFECT!
            -- Task 4a:PERFECT!
            -- Task 4b:PERFECT!
            -- Task 5: ok
        Assignment 2: 9/10  + 1 bonus from Assign 3
            Everything is perfect except that the testing is minimal
                for task 2 and 3.
		Assignment 3: 10/10  
			-- PERFECT! 11/10

11  Jøkladal, Ásbjørn Viderø        wvc561@alumni.ku.dk
        Assignment 1:  CORRECTED in RESUBMISSION 10/10 (was 7/10)
            -- Task 1: perfect.
            -- Task 2: perfect.
            -- Task 3: CORRECTED in RESUBMISSION
                        pretty good until you used the `segmScanIncSeq'
                        with non-associative operator to compute the
                        new flags. 
            -- Task 4a): incorrect use of reduce with non-associative operator.
            -- Task 4b:  CORRECTED in RESUBMISSION
                        not submitted.
            -- Task 5: ok 
        Assignment 2: 7/10
            -- Task 1: perfect
            -- Task 2: perfect
            -- Task 3: not submitted
		Assignment 2: 7/10
			-- Task 1: perfect (but no validation)
			-- Task 2: not submitted at all

12  Kjær, Daniel                    lvb133@alumni.ku.dk
        Assignment 1: NOT SUBMITTED

13  Kozakovic, Michal               dpw616@alumni.ku.dk
        Assignment 1: FAIL
            -- Task 1: nothing
            -- Task 2: many mistakes
            -- Task 3: not submitted
            -- Task 4a: ok, but with list comprehension and sum
            -- Task 4b: not submitted
            -- Task 5: ok.

14  Larsen, Mathias Normann         dlw426@alumni.ku.dk
        Assignment 1: AFTER RESUBMISSION 9/10 (was 6/10)
            -- Task 1: perfect
            -- Task 2: CORRECTED in RESUBMISSION
                        wrong newlis and newlcs
                        newlis = if okx && connect then lssx + lisy else lssx
            -- Task 3: uses nested parallelism, i.e., map parFilter 
                        and concatenation in foldl operator.
            -- Task 4a: ok
            -- Task 4b: CORRECTED IN RESUBMISSION
                        morally correct but (i) uses
                            scanl(\(c1,v1) (c2,v2) ->
                                    (c2,x!!c2 * v2)) (0,0.0) mat
                            INSTEAD OF A MAP:
                        and (ii) uses lists of (empty) lists to get
                        rid of undesired elements. 
            -- Task 5: ok.
        Assignment 2: 7/10  
            -- Task 1: has removed volatile from scan_warp and scan_block
                        hence does not run correctly.
            -- Task 2: after I placed my MssOp and MyInt4 type,
                        it worked out of the box.
            -- Task 3: after the corrections it worked.
            -- Validation not provided for the big datasets,
                many small errors.
		Assignment 3: 10/10
			-- close to perfect,
			-- forgot cudaThreadSynchronize()
				before measuring time, and also needs bigger sizes
				for matrices. 

15  Linneberg, Simon Skjerning      vlh486@alumni.ku.dk
        Assignment 1:  9/10
            -- Task 1: perfect
            -- Task 2: small mistake:
                        newlss  = if connect then lcsx + lisy else lssx `max` lssy
            -- Task 3: morally ok, but uses some reduction with ++ to flatten.
            -- Task 4a: ok
            -- Task 4b: morally correct but again maps to empty lists and flattens
                            get rid of undesired elements.
            -- Task 5: ok.
        Assignment 2: 10/10 RESUBMISSION FIXED ALL PROBLEMS!
							(initially Fail)
            -- Task 1: almost ok (small bugs, such as no if(gid<size) branch)
                        used my validation test, etc.
            -- Task 2: not working because he used an int4 variant
            -- Task 3: not implemented.
		Assignment 3: 8/10
			-- several mistakes (e.g., in calling validate)
			-- main problem is that the TILED transposition
				did not result in coalesced access.

16  Målsnes, Tarjei Sefland         tcd116@alumni.ku.dk
        Assignment 1: NOT IN THE COURSE ANYMORE

17  Passov, Kasper                  pvx884@alumni.ku.dk
        Assignment 1: NOT SUBMITTED

18  Pedersen, Emil Heckermann       gvh799@alumni.ku.dk
        Assignment 1: 8/10
            -- Task 1:  perfect
            -- Task 2:  FIXED IN RESUBMISSION 
                        almost correct, but for ``newok = okx && oky''
            -- Task 3:  not submitted
            -- Task 4a&b: FIXED IN RESUBMISSION
                        recursion, missed the point
                        Task 4b: not submitted
            -- Task 5: FIXED IN RESUBMISSION
                        loop inside the kernel, missed the point.
        Assignment 2: 7/10
            -- Good, but used the fill-in-the-blanks form.

19  Podaras, Silvana                pqx917@alumni.ku.dk
        Assignment 1:  8/10
            -- Task 1: perfect
            -- Task 2: 
            -- Task 3: morally ok, but uses some reduction with ++ to flatten.
            -- Task 4a: ok
            -- Task 4b: morally correct but again maps to empty lists and flattens
                            get rid of undesired elements.
            -- Task 5: ok.
        Assignment 2: 7/10
            -- All tasks assume arrays of sizes that match perfectly the grid
                i.e., no ifs inside kernel
            Task 1: good!
            Task 2: only a scanInc<MsspOp, MyInt4> ... on ones
                    where's the map?
            Task 3: ok, but minuscule dataset + result vector
                    incorrectly assumed of the same size as the
                    input vector (should be # of matrix rows) 
		Assignment 3: 9/10 VERY GOOD JOB!
			Marked by Rasmus seem to not have commented enough.

20  Ravn, Christian                 jkr893@alumni.ku.dk
        Assignment 1:  7/10
            -- Task 1: not done!
            -- Task 2: perfect!
            -- Task 3: not submitted
            -- Task 4a: ok!
            -- Task 4b: perfect!
            -- Task 5: looks good to me.
        Assignment 2: 7/10
            Task 1: good!
            Task 2: not implemented + validation.
            Task 3: extedn the dataset to work with large matrix,
                    e.g., of random numbers in [0,1] and then test against
                    the result of sequential execution.
		Assignment 3: 7/10
			Task 1: tiled transposition did not fix
					coalesced access; and naive
					version runs slow (perhaps redundant 
					computation?)   However, everything
					validates and time measurement were
					provided.
			Task 2: not submitted.

21  Rønning, Ola                    vdl761@alumni.ku.dk   (focus)
        Assignment 1:  8/10
            -- Task 1: perfect!
            -- Task 2: small mistake: forgot to && with connect!
            -- Task 3: does not do much ...
            -- Task 4a: ok!
            -- Task 4b: perfect!
            -- Task 5: looks good to me.
        Assignment 2: 8/10
            -- Task 1: small bug with potential array out of bounds for a kernel
            -- Task 2: way more complicated than necessary (and not clear if correct)
            -- Task 3: works well for pow2 sizes but does not validate on
                        non-pow2s
		Assignment 3: 10/10 
					several mistakes, such as not placing
					cudaThreadSynchronize() when measuring time

22  Serup, Niels G. W.              njf941@alumni.ku.dk
        Assignment 1: 10/10
            -- ALL PERFECT.
        Assignment 2: 10/10.
            -- ALL PERFECT.
		Assignment 3: 9/10

23  Siozos-Drosos, Sokratis         dnb823@alumni.ku.dk
        NOT ENROLLED ANYMORE ON ABSALON!

24  Skaarup, Esben                  npl306@alumni.ku.dk
        Assignment 1:  10/10
            -- Perfect Solution!
        Assignment 2: 10/10
            Task 1: ok, but some accesses may be out of bounds:
            Task 2: good but would be nice to have the map on 
                    GPU so as not to transfer 4x the necessary 
                    memory.
            Task 3: good!
		Assignment 3: 10/10
			PERFECT! 

25  Svensson, Mathias Bundgaard     tpx783@alumni.ku.dk
        Assignment 1:  10/10
            -- Perfect Solution!
        Assignment 2: FAIL
            -- Task 1: Perfect
            -- Task 2 & 3: not submitted.
		Assignment 3: 10/10
			-- ok, some minor issues, 
				but I could not find to fix them.

26  Søgaard, Ulrik                  lfd450@alumni.ku.dk
        Assignment 1:  10/10
            -- Perfect Solution!   forgot only about ``&& connect''
        Assignment 2: 9/10 +1p bonus from assignment 3
            -- Perfect except that tasks 2&3 use small datasets.
		Assignment 3: 10/10

27  Tahirski, Ivaylo                jtp841@alumni.ku.dk
        NOT ENROLLED ANYMORE!

28  Thegler, Asbjørn                rzw488@alumni.ku.dk
        Assignment 1:  FAIL
            -- Task 1: perfect
            -- Task 2: partially implemented
            -- Tasks 3 and 4: not submitted.
            -- Task 5: something, but a strange 
                       sequential loop there...
        Assignment 2: FAIL
            -- Task 1: ok, but unnecessarily complicated.
            -- Task 2 & 3: not implemented.
		Assignment 3: 9/10
			-- minor mistake when he computed gid he only took threadIdx.x
			-- confused task2b with task2a!
            
29  Tørholm, Sebastian Paaske       bns895@alumni.ku.dk
        Assignment 1:  AFTER RESUBMISSIOn 10/10  (was 9/10)
            -- Task 4b FIXED in RESUBMISSION
            -- Almost perfect, but for Task 4b which is not executed
               properly, i.e., uses nested parallelism and scanl with 
               neutral element -1?
        Assignment 2: 10/10 after RESUBMISSION (was 9/10)
            -- Task 1: perfect
            -- Task 2: perfect
            -- Task 3: Testing fixed with RESUBMISSION
                        almost perfect, lost 1p for
                        a minuscule dataset.
		Assignment 3: 10/10
			-- PERFECT

30  Urms, Henriks                   mgs837@alumni.ku.dk
        Assignment 1:  AFTER RESUBMISSION 10/10 (was ...?...)
            -- Task 1: perfect
            -- Task 2: Fixed by RESUBMISISON 
                        partially implemented
            -- Task 3: perfect
            -- Task 4: CORRECTED by RESUBMISSION
                       not submitted.
            -- Task 5: ok
        Assignment 2: 5/10
            -- Task 1: sloppy (not tested, many bugs)
            -- Task 2: perfect
            -- Task 3: not tried.
		Assignment 3: 10/10 
			-- RESUBMISSION fixed all problems.
			-- reported that he made task1 but
				I could not find it on Absalon (?)
				

31  Wejendorp, Jacob                nrm891@alumni.ku.dk
        Assignment 1: NOT SUBMITTED



#   TEACHERS/ADMINISTRATORS         KU ID / EMAIL
1   Fonseca, Rasmus                 vxb217  rfonseca@di.ku.dk
2   Henriksen, Troels               mzd885  athas@di.ku.dk
3   Oancea, Cosmin Eugen            xmf768  cosmin.oancea@di.ku.dk


# Additional Students on Napoleon

